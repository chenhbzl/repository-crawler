<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mongo="http://www.springframework.org/schema/data/mongo"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:/org/springframework/beans/factory/xml/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
						http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">
	
	<!-- 注解配置  <context:annotation-config />-->
	<context:component-scan base-package="org.platform.crawler">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
	</context:component-scan>
	
	<!-- 加载文件配置 -->
	<context:property-placeholder location="classpath*:database/jdbc.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath*:database/redis.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath*:log4j/log4j.properties" ignore-unresolvable="true"/>
	
	<!-- DBCP数据源配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}"></property> 
		<property name="url" value="${url}"></property> 
		<property name="username" value="${username}"></property> 
		<property name="password" value="${password}"></property> 
		<property name="initialSize" value="${dbcp.initialSize}"></property> 
		<property name="maxActive" value="${dbcp.maxActive}"></property> 
		<property name="maxIdle" value="${dbcp.maxIdle}"></property> 
		<property name="minIdle" value="${dbcp.minIdle}"></property> 
		<property name="maxWait" value="${dbcp.maxWait}"></property> 
		<property name="removeAbandoned" value="${dbcp.removeAbandoned}"></property> 
		<property name="defaultAutoCommit" value="${dbcp.defaultAutoCommit}"></property> 
		<property name="removeAbandonedTimeout" value="${dbcp.removeAbandonedTimeout}"></property> 
	</bean> 
	
	<!-- Spring JDBC 配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		 <property name="dataSource"> 
		 	<ref bean="dataSource" /> 
	 	 </property> 
	</bean> 
	
	<!-- Jedis Pool 配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<!-- 
		<property name="maxActive" value="${redis.pool.maxActive}" />
		<property name="maxWait" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		-->
	</bean>
	
    <!-- 持久化Redis的 Jedis Pool 配置 -->
    <bean id="persistenceJedisPool" class="org.platform.crawler.utils.redis.ShardedJedisPoolWrapper">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1" value="${redis.pool.address}" />
    </bean> 
    
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
    	<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
        <constructor-arg name="host" value="${redis.pool.host}" />
    	<!--  
    	<constructor-arg name="host" value="${redis.pool.host}" />
    	<constructor-arg name="port" value="${redis.pool.port}" />
    	-->
    </bean>
	
	<!-- MongoDB 配置 -->
	<mongo:mongo id="mongo" host="${mongodb.host}" port="${mongodb.port}">
	</mongo:mongo>  
	
	<mongo:db-factory dbname="${mongodb.dbname}" mongo-ref="mongo" />
    
    <!-- Spring MongoDB 配置 -->
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">  
        <constructor-arg ref = "mongo" />  
        <constructor-arg name = "databaseName" value="${mongodb.dbname}" />  
    </bean> 
	
	<!-- 事务配置 -->
	<!-- TX标签事务配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />  
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="read*" propagation="REQUIRED" read-only="true" />
			<tx:method name="select*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>  
       <aop:pointcut id="interceptorPointCuts"  
           expression="(execution(* org.platform.crawler.*.modules.*.biz.impl.*.*(..))) or
           			   (execution(* org.platform.crawler.*.modules.*.service.impl.*.*(..)))" />  
       <aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />          
    </aop:config>  
    
    <!-- 注解事务配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
    
    <!-- 实现@AspectJ注解的 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- MyBatis 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="org.platform.crawler.webmagic.modules.job.entity" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:org/platform/crawler/webmagic/modules/*/mapper/*.xml" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  	<property name="basePackage" value="org.platform.crawler.webmagic.modules.*.mapper" />
	  	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
</beans>